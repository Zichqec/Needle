OnSurfaceRestore
{
	// if !(SHIORI3FW.LastSurface[1] == -1); "\1\s[-1]"
	// --
	// if !(SHIORI3FW.LastSurface[0] == 0); "\0\s[0]"
	if SHIORI3FW.IsVisible[2] == 1; "\p[2]\s[-1]"
	--
	if SHIORI3FW.IsVisible[1] == 1; "\1\s[-1]"
	--
	if SHIORI3FW.IsVisible[0] != 1 || SHIORI3FW.LastSurface[0] != 0; "\0\s[0]"
}

OnBoot
{
	if mysterynum == ""; mysterynum = RAND(10)
	mysterynum += RAND(10) + 1

	_newname = ""
	if NicknameSet
	{
		_newname = NameMangler(username)
		_i = 0
		while ASEARCH(_newname,nicknames) != -1 && _i < 9999 //10000 is the default loop limit. Sooo... exit the loop just before it if we somehow get this high (which, realistically, we never should). In that case you might get a dupe name. Um, oh well. That's a lot of names lol.
		{
			_newname = NameMangler(username)
			_i++
		}
		nicknames ,= _newname
	}
	else; _newname = truename

	"\p[2]\s[-1]\![set,balloonoffset,0,-300]\![move,--x=0,--y=0,--base=0,--option=ignore-sticky-window]"
	--
	"\1\s[-1]\![set,balloonoffset,-350,-150]\![move,--x=0,--y=0,--base=0,--option=ignore-sticky-window]"
	--
	"\0\s[0]"
	--
	"Hello,\w4 %(_newname)"
	"Hi,\w4 %(_newname)"
	"Greetings,\w4 %(_newname)"
	"G'day,\w4 %(_newname)"
	"Needly day to you,\w4 %(_newname)"
}

OnGhostChanged {OnBoot} //For reloading

// OnShellChanged
// {
	// "\p[2]\s[-1]\![move,--x=0,--y=0,--base=0,--option=ignore-sticky-window]\![set,balloonoffset,0,-300]"
	// --
	// "\1\s[-1]\![move,--x=0,--y=0,--base=0,--option=ignore-sticky-window]\![set,balloonoffset,-350,-150]"
	// --
	// "\0\s[0]"
	// --
	// "%(poke) %(reference0)"
	// "new shell,\w4 new %(poke)"
	// "Deadly Precision"
// }

OnShellRandom
{
	"\![change,shell,random]"
}

OnClose
{
	"kicks you out"
	"%(laugh)"
	"See you tonight"
	"%(poke) for the road"
	"Takes your %(bodypart) with me"
	--
	"\w8\w8\-\e"
}

OnFirstBoot
{
	mysterynum = RAND(10)
	truename = maketruename
	nicknames = IARRAY
	
	RandomShells = 0
	SetNextShellChange
	gesture = IARRAY
	ShellRotationIndex = 0
	ShellRotationExcluded = IARRAY
	ShellRotationChoosing = 0

	_rand = RAND(30) + 1

	"\1\s[-1]\![move,--x=0,--y=0,--base=0,--option=ignore-sticky-window]\![set,balloonoffset,-350,-150]\p[2]\s[-1]\![move,--x=0,--y=0,--base=0,--option=ignore-sticky-window]\![set,balloonoffset,0,-300]\0\s[0]\t\_w[%(_rand * 1000)]"
	--
	"NEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\1EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\p[2]EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEDLE"
}

OnTranslate
{
	_input = reference0
	//_input = "\n\n\n" + _input
	if reference1 == "" && reference2 == ""
	{
		_replace = REPLACE(_input,'"','""')
		_input = EVAL('"' + _replace + '"')
	}

	_nicknamelist = ASORT("string,descending,length",nicknames)
	if !(reference2 == "OnName" || reference2 == "OnNewName")
	{
		for _i = 0; _i < ARRAYSIZE(_nicknamelist); _i++
		{
			_name = _nicknamelist[_i]
			//_input = REPLACE(_input,"%(_name)","\_a[OnName,Nick,""%(_name)""]%(_name)\_a")
			_input = REPLACE(_input,"%(_name)",";REGEX_NICKNAME" + _i + "_REGEX;")
		}
		_num = RE_GREP(_input,";REGEX_NICKNAME(\d+)_REGEX;")
		_found = RE_GETSTR

		_input = REPLACE(_input,"%(username)","\_a[OnName,User]%(username)\_a") //take care of normal username

		if _num > 0
		{
			while ARRAYSIZE(_found) > 0
			{
				_str = _found[0]
				_str = REPLACE(_str,";REGEX_NICKNAME","")
				_str = REPLACE(_str,"_REGEX;","")
				_str = TOINT(_str)
				_input = REPLACE(_input,";REGEX_NICKNAME%(_str)_REGEX;","\_a[OnName,Nick,""%(_nicknamelist[_str])""]%(_nicknamelist[_str])\_a")
				_found[0] = IARRAY
			}
		}
	}

	if reference2 == "OnName"
	{
		_input = REPLACE(_input,"%(truename)","\_a[OnNewName,%(truename)]%(truename)\_a")
	}
	elseif !(reference2 == "OnTrueNameAcceptance" || reference2 == "OnTrueNameDenial" || reference2 == "OnNewName")
	{
		_input = REPLACE(_input,"%(truename)","\_a[OnName,True]%(truename)\_a")
		_input = REPLACE(_input,"%(TOUPPER(truename))","\_a[OnName,True]%(TOUPPER(truename))\_a") //Bandaid patch because I realized the Needle At Law dialogue wasn't linking properly
		_input = REPLACE(_input,"%(TOLOWER(truename))","\_a[OnName,True]%(TOLOWER(truename))\_a")
	}
	TOSTR(_input)
}


OnNewTalkInterval
{
	LOGGING("reference: %(reference)")
	if reference0 == "special"
	{
		aitalkinterval = TOINT(reference1)
	}
	else
	{
		aitalkinterval = (RAND(100) + 1) * 10
		if RAND(1000) == 0; aitalkinterval = 3600 //rare chance for an hour lol rip you
	}
	LOGGING("NEW INTERVAL: %(aitalkinterval)")
}

OnTestChain : nonoverlap
{
	"i am in control\![raise,OnNewTalkInterval,special,30]\e:chain=chain.in_control"
	"im so tired... but... chicken noodle night...\![raise,OnNewTalkInterval,special,60]\e:chain=chain.chicken_noodle_night"
}

OnName
{
	//"wut u wont ur name of lies 2 b, %(truename)"
	"\*\t"
	--
	if NicknameSet
	{
		"%(truename).\w8 %(bold)%(big)gIVE mE yOUR nAME.%(small)%(boldoff)"
		"Are you ready to accept your true identity as %(truename) yet,\w4 or should we keep playing this little game?"
		"%(nickname).\w8 %(username).\w8 %(italics)%(truename)%(italicsoff).\w8 Don't tell me that you're reconsidering who you are now,\w4 after all of the titles I've given you?"
		"rips off ur %(username) nametag to reveal another, smaller %(truename) nametag underneath"
	}
	else
	{
		if reference0 == "Rejection"
		{
			"%(italics)Fine.%(italicsoff)\w8\w8 What is your name then,\w4 if it isn't %(truename)?"
		}
		else
		{
			"\*\tAh?\w8 What is it,\w4 %(truename)?\w8 Is something the matter?"
			--
			"\n\n\_q"
			--
			"\![*]\q[Not a thing,OnTrueNameAcceptance]\n"
			--
			"\![*]\q[That's not my name,OnTrueNameDenial]\e"
		}
	}
	--
	NameInput //I'm not sure I like the structure of all of this but my brain is very scrambled lol
}

NameInput
{
	"\![open,inputbox,OnNewName,-1,(Write your lies here)]\_l[-10000,-10000]\q[,timeoutprevention]"
}

OnTrueNameAcceptance
{
	"Good.\w8 I know you better than anyone else,\w4 I hope you know.\w8 That means I care about you.\w8 And your happiness."
}

OnTrueNameDenial : all
{
	"What are you talking about? Of course it is. I know everyone's names! Even people that don't know their own names yet. It's my super special magical power. Don't you believe me, %(truename)?"

	"\n\n\_q"
	"\![*]\q[Of course I do,OnTrueNameAcceptance]\n"
	"\![*]\q[That really isn't my name,OnName,Rejection]"
}

/*

paper cut font
jo wrote a lovesong
3 prong tree
2 prong tree
free 3 of 9
metal mania
to the point

*/

OnUserInputCancel
{
	"\C\![open,inputbox,%(reference0),-1]"
}

OnNewName
{
	"\![close,inputbox,OnNewName]"
	--
	if reference0 == "(Write your lies here)" || reference0 == ""
	{
		//"yeah uh huh sure"
		"%(laugh) very well then.\w8 stay silent.\w8 your name will remain engraved on your %(bodypart)."
		"%(gray)%(slower)empty %(slow)empty %(regspeed)empty %(fast)empty %(faster)empty%(regspeed)\w8\w8\w8\w8\w8\w8\n\n\n\n\n\n\n\n\n\nit's empty%(grayoff)"
		"Leaving it up to the universe to decide?\w8 I'll stand in for now."
		"yes yes yes yes yes destroy me"
	}
	elseif reference0 == truename
	{
		username = ""
		nicknames = IARRAY

		//"HA, YOU SEE, I WAS RIGHT ABOUT YOU"
		"Finally.\w8\w8\w8 Welcome home."
		"%(truename) %(truename) %(truename) %(truename) %(truename) %(truename) %(truename)"
		"I see you've accepted the truth.\w8 Let's hope this isn't a lesson that needs to be learned again."
		"Good.\w8 I've never forgotten who you are,\w4 %(truename)."
	}
	elseif TOLOWER(reference0) == "needle"
	{
		// username = reference0
		// nicknames = IARRAY
		// _newname = NameMangler(username)
		// nicknames ,= _newname

		_display = ""
		for _i = 0; _i < 50; _i++
		{
			_display += "%(needle)"
		}
		_display
	}
	elseif TOLOWER(reference0) == "balloons"
	{
		// username = reference0
		// nicknames = IARRAY
		// _newname = NameMangler(username)
		// nicknames ,= _newname

		_display = ""
		for _i = 0; _i < 10; _i++
		{
			_display += "%(poke) "
		}
		_display
	}
	elseif reference0 == username
	{
		nicknames = IARRAY
		_newname = NameMangler(username)
		nicknames ,= _newname

		//"FINE i'll come up with MORE NICKNAMES FOR YOU, like %(_newname)"
		"Sure,\w4 sure.\w8 I remember.\w8 %(username).\w8 %(_newname) for short."
		"Oh,\w4 wow,\w4 how could I forget!?\w8 %(username)!\w8 You told me that before!\w8 Don't worry,\w4 %(_newname),\w4 I'll remember it for sure this time."
		"%(username) %(username) %(username) %(_newname) %(_newname) %(screamrand)"
		"covers ur %(username) nametag with %(_newname)"
	}
	else
	{
		username = reference0
		nicknames = IARRAY
		_newname = NameMangler(username)
		nicknames ,= _newname

		//"don't like it.\w8\w8 your name is %(_newname) now."
		"Whatever you say,\w4 %(_newname)."
		"writes %(_newname) on your %(bodypart) in permanent marker"
		"no no no no no bad choice,\w4 i'll call you %(_newname) instead"
		"Okay I love you %(_newname) I'll get you a new collar tomorrow."
	}
}

OnKeyPress
{
	if reference0 == "t" && debug >= 1; OnAiTalk
	elseif reference0 == "c" && debug == 1; "\C\![raise,OnTakeItBack,%(STRLEN(SHIORI3FW.LastTalk))]"
}


/*

TO IMPLEMENT NEEDLE POKING YOUR GHOST:

When needle pokes a ghost (overlaps it, when it previously was not overlapping it) it sends the OnNeedlePoke event. It also sends which character it's poking, as a number. So 0 for sakura, 1 for kero, etc.

reference1 is the name of the current shell.

At the moment, this just sends the events one after the other... so if you've got more than one character that might get complicated. Uh. Hm... I miiiight update this later to send an array or something, but that might be very complicated. So! For now it's gonna be one at a time, sorry.

But yeah basically it'd look like this:

OnNeedlePoke
{
	if reference0 == 0 //Sakura
	{
		"\0Ow!"
	}
	elseif reference0 == 1 //Kero
	{
		"\1Ow!"
	}
	elseif reference0 == 2 //Third char
	{
		"\p[2]Ow!"
	}
	//etc...
}

*/

OnOtherOverlap : all
{
	_pokepoke = SPLIT(reference.raw[0],C_BYTE1)
	_unpokeunpoke = SPLIT(reference.raw[1],C_BYTE1)
	_newpoke = IARRAY
	_command = ""
	_dressups = ""
	foreach CurrentDressups; _dressup
	{
		if _dressups != ""; _dressups += C_BYTE1
		_dressups += _dressup
	}

	foreach _pokepoke; _poke
	{
		if "Needle/0" _in_ _poke && ASEARCH(_poke,_unpokeunpoke) == -1 //If needle is poking, AND this is not in the unpoke array
		{
			//Figure out which side needle is on and get the other side as the ghost name
			_char = ""
			if "-Needle" _in_ _poke; _char = REPLACE(_poke,"-Needle/0","")
			else; _char = REPLACE(_poke,"Needle/0-","")

			//Some ghost names may have slashes, so make _sure_ we've got the full ghost name. And also, grab the final number
			_char = SPLIT(_char,"/")
			_num = ""
			_final = ""
			for _i = 0; _i < ARRAYSIZE(_char); _i++
			{
				if _i == (ARRAYSIZE(_char) - 1)
				{
					_num = _char[_i]
					break
				}

				if _i != 0; _final += "/"
				_final += _char[_i]
			}

			_command += "\![raiseother,%(_final),OnNeedlePoke,%(_num),""%(SHIORI3FW.ShellName)"",""%(_dressups)""]"
		}
	}
	if _command != ""
	{
		"%(_command)"
		--
		if IsBlushieShell; "uwu "
		--
		poke
		--
		if IsBlushieShell; " uwu"
	}
}

OnNotifyDressupInfo
{
	CurrentDressups = IARRAY
	
	foreach reference; _ref
	{
		if _ref[4,C_BYTE1] == "1"
		{
			CurrentDressups ,= "%(_ref[1,C_BYTE1])" + C_BYTE1 + "%(_ref[2,C_BYTE1])"
		}
	}
}

//I remembered it this time lol
On_homeurl
{
	"https://raw.githubusercontent.com/Zichqec/Needle/main/"
}

OnMouseDoubleClick
{
	LOGGING("test: MOTION_ENABLED")
	
	if IsBlushieShell; "uwu "
	--
	poke
	--
	if IsBlushieShell; " uwu"
	--
	"\_l[-10000]\_q\_a[OnNeedlePokeChoice]Please open the menu\_a"
}

OnNeedlePokeChoice : all
{
	needle

	"\b2\*\n\n"
	"\![*]\q[Poke something,OnPokePoke]\n"
	"\![*]\q[Poke something,OnPokePoke]\n"
	"\![*]\q[Poke something,OnPokePoke]\n"
	"\![*]\q[Poke something,OnPokePoke]\n"
	"\![*]\q[Poke something,OnPokePoke]\n"
	"\![*]\q[Poke something,OnPokePoke]\n"
	"\![*]\q[Poke something,OnPokePoke]\n"
	"\n"
	"\![*]\q[Nevermind,cancel]\n\n"

	"%(hour12ex):%(minute) %(('AM','PM')[ampm])"
}

OnPokePoke
{
	poke
}

IsBlushieShell
{
	if SHIORI3FW.ShellName == "Blushie"
	{
		if ASEARCH("uwu" + C_BYTE1 + "on/off",CurrentDressups) != -1
		{
			1
			return
		}
	}
	0
}

//Thanks to https://www.industrian.net/tutorials/converting-numbers-to-roman-numerals/ for helping me figure out the logic for this
IntToNumeral
{
	//This generator only handles from 1-3999, so if it's outside that range, return a 0
	_input = TOINT(_argv[0])
	if _input <= 0 || _input >= 4000; {0; return}

	_thousands = ",M,MM,MMM"
	_hundreds = ",C,CC,CCC,CD,D,DC,DCC,DCCC,CM"
	_tens = ",X,XX,XXX,XL,L,LX,LXX,LXXX,XC"
	_ones = ",I,II,III,IV,V,VI,VII,VIII,IX"

	//Do math to get which number is in each column
	_thousands_digit = (_input / 1000)
	_hundreds_digit = (_input / 100) % 10
	_tens_digit = (_input / 10) % 10
	_ones_digit = _input % 10

	//Add numerals based on which digits they correspond to
	_output = ""
	_output += _thousands[_thousands_digit]
	_output += _hundreds[_hundreds_digit]
	_output += _tens[_tens_digit]
	_output += _ones[_ones_digit]
	_output
}

TestNumeral
{
	_rand = RAND(4000)
	"\_q%(_rand)\n%(IntToNumeral(_rand))"
}

RomanNumeral
{
	_small = RAND(10) + 1
	_big = RAND(3999) + 1
	_use = _small
	if RAND(5) == 0; _use = _big
	IntToNumeral(_use)
}



OnUpdate.OnDownloadBegin : all
{
	"\_q"
	"NE"
	for _i = 0; _i < reference2 + 1; _i++
	{
		if _i == reference1 + 1; gray
		"E"
	}
	"DLE\e"
}

OnTest
{
	//"%(nickname)"
	"\_q%(nickname)\n\n[half]%(nickname)\n\n[half]%(nickname)\n\n[half]%(nickname)\n\n[half]%(nickname)\n\n[half]%(nickname)\n\n[half]%(nickname)\n\n[half]%(nickname)\n\n[half]%(nickname)\n\n[half]%(nickname)"
}


On_tamaOpen
{
	TamaHWND = reference0
	SETTAMAHWND(TamaHWND)
	SHIORI3FW.Push_X_SSTP_PassThru('Title',"%(ANY(poke,needle,poke + ' ' + needle))") //These settings are all optional
	SHIORI3FW.Push_X_SSTP_PassThru('border.color','999999')
	SHIORI3FW.Push_X_SSTP_PassThru('background.color','707070')
	SHIORI3FW.Push_X_SSTP_PassThru('default.color','e5e5e5') //and any other settings you can find in tama.txt
	SHIORI3FW.Push_X_SSTP_PassThru('fatal.color','f23e3e')
	SHIORI3FW.Push_X_SSTP_PassThru('error.color','f23e3e')
	SHIORI3FW.Push_X_SSTP_PassThru('warning.color','ff972d')
	"%(poke) Tama"
}
On_tamaExit
{
	SETTAMAHWND(0)
	"Tama %(poke)d"
}

OnInitialize
{
	SetNextShellChange
	ErrorsToPush.level = IARRAY
	ErrorsToPush.description = IARRAY
	if reference0 == "reload" && TamaHWND != ""; SETTAMAHWND(TamaHWND)
	else; TamaHWND = ""
	
	if !ISVAR("RandomShells"); RandomShells = 0
	gesture = IARRAY
	if !ISVAR("ShellRotationIndex"); ShellRotationIndex = 0
	if !ISVAR("ShellRotationExcluded"); ShellRotationExcluded = IARRAY
	ShellRotationChoosing = 0
}

OnDestroy
{
	if reference0 != "reload"; TamaHWND = ""
	SETTAMAHWND(0)
}

//Gets other ghost names and saves them to a list
On_otherghostname
{
	ghostexlist = ""
	foreach reference; _ghost
	{
		if ghostexlist != ""; ghostexlist += C_BYTE1
		ghostexlist += _ghost[0]
	}
	ghostexcount = ARRAYSIZE(SPLIT(ghostexlist,C_BYTE1))
}

OnSecondChange
{
	//Create arrays if none exist
	if !ISVAR("ErrorsToPush.level"); ErrorsToPush.level = IARRAY
	if !ISVAR("ErrorsToPush.description"); ErrorsToPush.description = IARRAY

	if ARRAYSIZE(ErrorsToPush.level) > 0 //If there are errors
	{
		_levels = ""
		_descriptions = ""
		for _i = 0; _i < ARRAYSIZE(ErrorsToPush.level); _i++ //CHR(1) in here is the divider between errors
		{
			if _i > 0; {_levels += CHR(1); _descriptions += CHR(1)}
			_levels += ErrorsToPush.level[_i]
			_descriptions += ErrorsToPush.description[_i]
		}
		//Push the whole list of errors together
		SHIORI3FW.PushAdditionalReturn('ErrorLevel',_levels)
		SHIORI3FW.PushAdditionalReturn('ErrorDescription',_descriptions)

		//Clear the arrays so we don't send any more errors later
		ErrorsToPush.level = IARRAY
		ErrorsToPush.description = IARRAY
	}
}

ErrorLog
{
	//Create arrays if none exist
	if !ISVAR("ErrorsToPush.level"); ErrorsToPush.level = IARRAY
	if !ISVAR("ErrorsToPush.description"); ErrorsToPush.description = IARRAY

	_level = "warning" //It defaults to warning if it doesn't recognize what you've put in, so I will too
	if _argv[1] != ""; _level = _argv[1]

	ErrorsToPush.level ,= _level
	ErrorsToPush.description ,= _argv[0]
}

//Functions for checking if the given string is all uppercase or lowercase. If the given string matches itself when the case is changed, then it must be all upper/lowercase. Note that empty strings and numbers are always treated as being true.
ISUPPER
{
	_argv[0] == TOUPPER(_argv[0])
}

ISLOWER
{
	_argv[0] == TOLOWER(_argv[0])
}

//Searches the start of a string for the requested substring.
//Argument 0 is the source string to search, argument 1 is the substring to search for.
//Returns 1 if true, 0 if false.
//Usage example:
//StartsWith("Testing","Test")
StartsWith
{
	SUBSTR(_argv[0],0,STRLEN(_argv[1])) == _argv[1]
}

//Searches the end of a string for the requested substring.
//Argument 0 is the source string to search, argument 1 is the substring to search for.
//Returns 1 if true, 0 if false.
//Usage example:
//EndsWith("Testing","ing")
EndsWith
{
	SUBSTR(_argv[0],STRLEN(_argv[0]) - STRLEN(_argv[1]),STRLEN(_argv[1])) == _argv[1]
}

OnFileDrop2 : all
{
	_filearray = SPLIT(reference.raw[0],C_BYTE1)

	foreach _filearray; _file
	{
		_filepath = SPLITPATH(_file)
		_filename = _filepath[2] + _filepath[3]

		"%(poke) %(_filename)\w8\n"
	}
}

OnDirectoryDrop
{
	_path = SPLITPATH(reference0)[1]
	SETDELIM(_path,"\")
	_len = ARRAYSIZE(_path) - 2
	_folder = _path[_len] //This stuff gets the folder name
	"%(poke) %(_folder)"
}

//WeightedNameMangler
NameMangler
{
	LOGGING("====================================================================")
	_input = _argv[0]
	
	_common_mangles = GETFUNCLIST("Mangler.Common.")
	_uncommon_mangles = GETFUNCLIST("Mangler.Uncommon.")
	_rare_mangles = GETFUNCLIST("Mangler.Rare.")

	LOGGING("_common_mangles: %(_common_mangles)")
	LOGGING("_uncommon_mangles: %(_uncommon_mangles)")
	LOGGING("_rare_mangles: %(_rare_mangles)")
	_rand = RAND(5) + 1
	LOGGING("_rand: %(_rand)")
	for _i = 0; _i < _rand || _input == _argv[0]; _i++
	{
		LOGGING("_i: %(_i)")
		_rarity = RAND(10)
		LOGGING("_rarity: %(_rarity)")
		_func = ""
		if _rarity < 1 //Rare, 0
		{
			_func = ANY(_rare_mangles)
			_rare_mangles[LSO] = IARRAY
		}
		elseif _rarity < 4 //Uncommon, 1-3
		{
			_func = ANY(_uncommon_mangles)
			_uncommon_mangles[LSO] = IARRAY
		}
		else //Common, 4-9
		{
			_func = ANY(_common_mangles)
			_common_mangles[LSO] = IARRAY
		}
		LOGGING("_func: %(_func)")
		LOGGING("before: %(_input)")
		_input = EVAL("%(_func)(_input)")
		LOGGING("after: %(_input)")
		LOGGING
	}
	_input
}

Mangler.Common.Upper
{
	_input = _argv[0]

	for _i = 0; _i < STRLEN(_input); _i++
	{
		if RAND(3) == 0
		{
			_input = SUBSTR(_input,0,_i) + TOUPPER(SUBSTR(_input,_i,1)) + SUBSTR(_input,_i + 1,STRLEN(_input) - _i)
		}
	}
	_input
}

Mangler.Common.Lower
{
	_input = _argv[0]

	for _i = 0; _i < STRLEN(_input); _i++
	{
		if RAND(3) == 0
		{
			_input = SUBSTR(_input,0,_i) + TOLOWER(SUBSTR(_input,_i,1)) + SUBSTR(_input,_i + 1,STRLEN(_input) - _i)
		}
	}
	_input
}

Mangler.Rare.1337
{
	_input = _argv[0]

	_input = REPLACE(_input,"A","4",1)
	_input = REPLACE(_input,"a","4",1)
	_input = REPLACE(_input,"B","8",1)
	_input = REPLACE(_input,"b","8",1)
	_input = REPLACE(_input,"E","3",1)
	_input = REPLACE(_input,"e","3",1)
	_input = REPLACE(_input,"G","6",1)
	_input = REPLACE(_input,"g","9",1)
	_input = REPLACE(_input,"H","#",1)
	_input = REPLACE(_input,"I","1",1)
	_input = REPLACE(_input,"i","1",1)
	_input = REPLACE(_input,"L","1",1)
	_input = REPLACE(_input,"l","1",1)
	_input = REPLACE(_input,"O","0",1)
	_input = REPLACE(_input,"o","0",1)
	_input = REPLACE(_input,"S","5",1)
	_input = REPLACE(_input,"s","5",1)
	_input = REPLACE(_input,"T","7",1)
	_input = REPLACE(_input,"t","7",1)
	_input = REPLACE(_input,"Z","2",1)
	_input = REPLACE(_input,"z","2",1)

	_input
}

Mangler.Uncommon.uwu
{
	_input = _argv[0]

	_input = REPLACE(_input,"R","W")
	_input = REPLACE(_input,"r","w")
	_input = REPLACE(_input,"L","W")
	_input = REPLACE(_input,"l","w")
	_input = REPLACE(_input,"you","uwu")

	_input
}

Mangler.Rare.Reverse
{
	if RAND(4) != 0; {_argv[0]; return}
	_input = _argv[0]
	_output = ""

	for _i = STRLEN(_input); _i >= 0; _i--
	{
		_output += SUBSTR(_input,_i,1)
	}

	_output
}

Mangler.Common.Title
{
	Title + " " + _argv[0]
}

Mangler.Common.Suffix
{
	_argv[0] + " " + Suffix
}

Mangler.Rare.Repeat
{
	_input = _argv[0]
	_output = ""


	_maxamt = RAND(5) + 1
	_amt = 0
	for _i = 0; _i < STRLEN(_input); _i++
	{
		_output += SUBSTR(_input,_i,1)
		if RAND(8) == 0 && _amt <= _maxamt
		{
			_rand = RAND(5)
			for _ii = 0; _ii < _rand; _ii++
			{
				_output += SUBSTR(_input,_i,1)
			}
			_amt++
		}
	}
	_output
}

Mangler.Rare.RepeatParticle
{
	_input = _argv[0]
	_chunk = SUBSTR(_input,RAND(STRLEN(_input)),RAND(STRLEN(_input) / 2) + 1)

	_rand = RAND(5) + 2
	_output = ""
	for _i = 0; _i < _rand; _i++
	{
		_output += _chunk
	}


	REPLACE(_input,_chunk,_output)
}

Mangler.Rare.Username
{
	_input = _argv[0]
	"xX" + REPLACE(_input," ","_") + "Xx"
}

Mangler.Common.Year
{
	_argv[0] + " " + ANY(year,RAND(200) + (year - 213))
}

Mangler.Uncommon.Qu
{
	_check = TOLOWER(_argv[0])

	_output = ""
	if "q" _in_ _check
	{
		_output = REPLACE(_argv[0],"q","qu")
		_output = REPLACE(_output,"Q","Qu")
	}
	else
	{
		_output = INSERT(_argv[0],RAND(STRLEN(_argv[0])),"qu")
	}
	_output
}

Mangler.Rare.J
{
	_output = _argv[0]
	_num = RAND(5) + 1
	for _i = 0; _i < _num; _i++
	{
		_output = INSERT(_output,RAND(STRLEN(_argv[0])),"j")
	}
	_output
}

Mangler.Rare.SpellingBee
{
	_input = _argv[0]
	_output = ""
	for _i = 0; _i < STRLEN(_input); _i++
	{
		if _i > 0 && !(SUBSTR(_input,_i,1) == " " || SUBSTR(_input,_i - 1,1) == " "); _output += "-"
		_output += SUBSTR(_input,_i,1)
	}
	_output
}

Mangler.Uncommon.Question
{
	_input = _argv[0]
	_output = ""
	_r = RAND(3)
	if _r == 1
	{
		_output = _input
		_num = RAND(5) + 1
		for _i = 0; _i < _num; _i++
		{
			_output = INSERT(_output,RAND(STRLEN(_input)),"?")
		}
	}
	elseif _r == 2
	{
		_output = INSERT(_input,RAND(STRLEN(_input)),"?")
	}
	else
	{
		_output = _input + "?"
	}
	_output
}

Mangler.Rare.ToThe
{
	_input = _argv[0]

	if !NameIsStillBase(_argv[0]); {_input; return}

	_output = ""

	for _i = 0; _i < STRLEN(_input); _i++
	{
		if _output != ""; _output += " to the "
		_output += TOUPPER(SUBSTR(_input,_i,1))
	}
	_output
}

Mangler.Rare.Space
{
	REPLACE(_argv[0]," "," SPACE ")
}

Mangler.Rare.Shout
{
	REPLACE(_argv[0]," ","! ") + "!"
}

Mangler.Rare.Quotes
{
	"''%(_argv[0])''"
	"Quote %(_argv[0]) Unquote"
}

Mangler.Rare.Double
{
	_input = _argv[0]
	_rand = RAND(STRLEN(_input) - 1)
	_char = SUBSTR(_input,_rand,1)
	
	REPLACE(_input,_char,_char + _char)
}

Mangler.Rare.NATOPhoneticAlphabet
{
	_input = _argv[0]
	if !NameIsStillBase(_argv[0],"ignore case"); {_input; return}
	
	_output = ""
	for _i = 0; _i < STRLEN(_input); _i++
	{
		_let = SUBSTR(_input,_i,1)
		_num = CHRCODE(_let)
		if _let == " "; continue
		if _i > 0; _output += " "
		
		_case = -1
		case _num
		{
			when 65-90
			{
				_case = 1
				_num -= 65
			}
			when 97-122
			{
				_case = 0 //lowercase because LOWER COMES FIRST no it doesnt, why ASCII
				_num -= 97
			}
		}
		
		if _case == -1; {_output += _let; continue}
		
		_output += ToCase(NATOPhoneticAlphabet[_num],_case)
	}
	_output
}

NATOPhoneticAlphabet : array
{
	"Alpha"
	"Bravo"
	"Charlie"
	"Delta"
	"Echo"
	"Foxtrot"
	"Golf"
	"Hotel"
	"India"
	"Juliett"
	"Kilo"
	"Lima"
	"Mike"
	"November"
	"Oscar"
	"Papa"
	"Quebec"
	"Romeo"
	"Sierra"
	"Tango"
	"Uniform"
	"Victor"
	"Whiskey"
	"X-ray"
	"Yankee"
	"Zulu"
}

NameIsStillBase
{
	_input = _argv[0]
	_called_directly = 0
	if  ASEARCH("NameMangler",GETCALLSTACK) == -1; _called_directly = 1
	
	_username = username
	if _argv[1] == "ignore case"
	{
		_username = TOLOWER(_username)
		_input = TOLOWER(_input)
	}
	
	if _input == _username || _called_directly; 1
	else; 0
}

// On_getaistate
// {
	// "%(OUTPUTNUM('RandomTalk')),%(OUTPUTNUM('importantitem')),%(OUTPUTNUM('Title')),%(OUTPUTNUM('Suffix')),%(OUTPUTNUM('killer')),%(OUTPUTNUM('trait')),%(OUTPUTNUM('that')),%(OUTPUTNUM('doer_of_things')),%(OUTPUTNUM('thinkabout')),%(OUTPUTNUM('bodypart')),%(OUTPUTNUM('name1')),%(OUTPUTNUM('name2')),%(OUTPUTNUM('creature')),%(OUTPUTNUM('object')),%(OUTPUTNUM('food')),%(OUTPUTNUM('flavor')),%(OUTPUTNUM('cuts')),%(OUTPUTNUM('bodypart')),processed" + C_BYTE1 + /
	// "RandomTalk,importantitem,Title,Suffix,killer,trait,that,doer_of_things,thinkabout,bodypart,name1,name2,creature,object,food,flavor,cuts,processed" + C_BYTE1
// }

// On_getaistateex : all
// {
	// if reference0 == 0; "%(OUTPUTNUM('RandomTalk')),%(OUTPUTNUM('importantitem')),%(OUTPUTNUM('Title')),%(OUTPUTNUM('Suffix')),%(OUTPUTNUM('killer')),%(OUTPUTNUM('trait'))" + C_BYTE1
	// if reference0 == 1; "%(OUTPUTNUM('that')),%(OUTPUTNUM('doer_of_things')),%(OUTPUTNUM('thinkabout')),%(OUTPUTNUM('bodypart')),%(OUTPUTNUM('name1')),%(OUTPUTNUM('name2'))" + C_BYTE1
	// if reference0 == 2; "%(OUTPUTNUM('creature')),%(OUTPUTNUM('object')),%(OUTPUTNUM('food')),%(OUTPUTNUM('flavor')),%(OUTPUTNUM('cuts')),%(OUTPUTNUM('bodypart')),processed" + C_BYTE1

	// if reference0 == 0; "RandomTalk,importantitem,Title,Suffix,killer,trait"
	// if reference0 == 1; "that,doer_of_things,thinkabout,bodypart,name1,name2"
	// if reference0 == 2; "creature,object,food,flavor,cuts,processed"
	
	
	// // switch reference0
	// // {
		// // "%(OUTPUTNUM('RandomTalk')),%(OUTPUTNUM('importantitem')),%(OUTPUTNUM('Title')),%(OUTPUTNUM('Suffix')),%(OUTPUTNUM('killer')),%(OUTPUTNUM('trait'))"
		// // "%(OUTPUTNUM('that')),%(OUTPUTNUM('doer_of_things')),%(OUTPUTNUM('thinkabout')),%(OUTPUTNUM('bodypart')),%(OUTPUTNUM('name1')),%(OUTPUTNUM('name2'))"
		// // "%(OUTPUTNUM('creature')),%(OUTPUTNUM('object')),%(OUTPUTNUM('food')),%(OUTPUTNUM('flavor')),%(OUTPUTNUM('cuts')),%(OUTPUTNUM('bodypart')),processed"
	// // }
	
	// //C_BYTE1
	
	// //else; "A,B,C,D,E,F"
	// // switch reference0
	// // {
		// // "RandomTalk,importantitem,Title,Suffix,killer,trait"
		// // "that,doer_of_things,thinkabout,bodypart,name1,name2"
		// // "creature,object,food,flavor,cuts,processed"
	// // }
// }

On_getaistateex : all
{
	_graph = AI_Graphs[reference0]
	if _graph != ""
	{
		_items = SPLIT(_graph,",")
		for _i = 0; _i < ARRAYSIZE(_items); _i++
		{
			if _i > 0; ","
			OUTPUTNUM("%(_items[_i])")
		}
		C_BYTE1
		for _i = 0; _i < ARRAYSIZE(_items); _i++
		{
			if _i > 0; ","
			"%(_items[_i])"
		}
	}
}

AI_Graphs : array
{
	"RandomTalk,importantitem,Title,Suffix,killer,trait"
	"that,doer_of_things,thinkabout,bodypart,name1,name2"
	"creature,object,food,flavor,cuts,processed"
}


OnMouseGesture
{
	if !ISVAR("gesture"); gesture = IARRAY
	if reference5 == "end"
	{
		if ShellRotationChoosing
		{
			foreach gesture; _g
			{
				if _g == "circle.cw"
				{
					ShellRotationIndex++
					OnShellRotationChoose
				}
				elseif _g == "circle.ccw"
				{
					ShellRotationIndex--
					OnShellRotationChoose
				}
			}
			
			_gesture = TOSTR(gesture)
			gesture = IARRAY
			
			if "left,right,left,right" _in_ _gesture
			{
				_shell = InstalledShells[ShellRotationIndex]
				if ASEARCH(_shell,ShellRotationExcluded) == -1
				{
					ShellRotationExcluded ,= _shell
					LOGGING("ShellRotationExcluded: %(ShellRotationExcluded)")
				}
				else
				{
					_elements = ASEARCHEX(_shell,ShellRotationExcluded)
					for _i = ARRAYSIZE(_elements) - 1; _i >= 0; _i-- //Goes from the end of the list to the start, so the elements stay in the same positions while we erase
					{
						_current = _elements[_i]
						ShellRotationExcluded[_current] = IARRAY
					}
				}
				LOGGING("ShellRotationExcluded: %(ShellRotationExcluded)")
				OnShellRotationChoose
			}
		}
		else
		{
			_gesture = TOSTR(gesture)
			gesture = IARRAY
			
			if _gesture == "up,right_down,up"; OnShellRotationToggle
			elseif _gesture == "left,down,right,left,down,right"; OnShellRotationStart
		}
		
	}
	else; gesture ,= reference5
}

OnShellRotationToggle
{
	if RandomShells == 0
	{
		RandomShells = 1
		
		"sparkles mysteriously"
		"picks my own clothes"
		"rotates"
		"full of power"
	}
	else
	{
		RandomShells = 0
		
		"neatly combed"
		"dressed up all fancy"
		"holds still"
		"smiles politely for the camera"
	}
}

OnShellRotationStart
{
	ShellRotationChoosing = 1
	ShellRotationIndex = 0
	if !ISVAR("ShellRotationExcluded"); ShellRotationExcluded = IARRAY
	OnShellRotationChoose
}

OnShellRotationChoose
{
	if ShellRotationIndex < 0; ShellRotationIndex = ARRAYSIZE(InstalledShells) - 1
	if ShellRotationIndex >= ARRAYSIZE(InstalledShells); ShellRotationIndex = 0
	
	_shell = InstalledShells[ShellRotationIndex]
	
	if ASEARCH(_shell,ShellRotationExcluded) != -1
	{
		"\f[strike,1]"
	}
	--
	_shell
}

OnBalloonTimeout
{
	OnBalloonClosed
}

OnBalloonBreak
{
	OnBalloonClosed
}

OnBalloonClose
{
	OnBalloonClosed
}

OnBalloonClosed
{
	ShellRotationChoosing = 0
}

On_installedshellname
{
	InstalledShells = reference
}

OnMinuteChange
{
	if !ISVAR("NextShellChange"); SetNextShellChange
	if RandomShells && (GETSECCOUNT - NextShellChange >= 0)
	{
		SetNextShellChange
		"\![get,property,OnGetShellCoords,currentghost.scope(0).rect]"
		--
		OnShellChangeStart
		
	}
}

SetNextShellChange
{
	NextShellChange = GETSECCOUNT + ((RAND(50) + 11) * 60)
}

OnShellChangeStart
{
	_acceptableshells = InstalledShells
	_i = ASEARCH(SHIORI3FW.ShellName,_acceptableshells)
	if _i != -1; _acceptableshells[_i] = IARRAY
	
	foreach ShellRotationExcluded; _excluded_shell
	{
		_i = ASEARCH(_excluded_shell,_acceptableshells)
		if _i != -1; _acceptableshells[_i] = IARRAY
	}
	if ARRAYSIZE(_acceptableshells) <= 1; return
	
	//_acceptableshells
	"\![change,shell,%(ANY(_acceptableshells))]"
}

OnGetShellCoords
{
	ShellChangeCoords = (reference0[0],reference0[1])
}

OnShellChanging
{
	"\![get,property,OnGetShellCoords,currentghost.scope(0).rect]"
}

OnShellChanged
{
	"\0\s[-1]\![move,--x=%(ShellChangeCoords[0]),--y=%(ShellChangeCoords[1]),--base=primaryscreen,--option=ignore-sticky-window]"
	--
	"\p[2]\s[-1]\![move,--x=0,--y=0,--base=0,--option=ignore-sticky-window]\![set,balloonoffset,0,-300]"
	--
	"\1\s[-1]\![move,--x=0,--y=0,--base=0,--option=ignore-sticky-window]\![set,balloonoffset,-350,-150]"
	--
	"\0\s[0]"
	--
	if SHIORI3FW.ShellName == "Correctly Drawn Needle"
	{
		"have you ever considered the anatomy of a needle and what makes it tick the ideal form is often considered to be up to interpretation but the truth of the matter is that one only needs to apply simple mathematics in order to find that there is a singular needly form that unilaterally performs all functions optimally and here we will demonstrate this for all that may be in doubt and if you disagree with our assessment you will be eliminated thank you have a nice day"
	}
	else
	{
		if IsBlushieShell; "uwu "
		--
		"%(poke) %(reference0)"
		"new shell,\w4 new %(poke)"
		"Deadly Precision"
		--
		if IsBlushieShell; " uwu"
	}
	
	ShellChangeCoords = IARRAY
}

DevWeddingLoops
{
	for _galla_cares_for_zi = 0; _galla_cares_for_zi >= 0; _galla_cares_for_zi++
	{
		for _zi_cares_for_galla = 0; _zi_cares_for_galla < 1; _zi_cares_for_galla++
		{
			ANY(MakeCoolGhostStuff,HaveTooManyGhostIdeas,CommitHijinks,BeFriends)
		}
	}
}

OnSpectrePlugin.ConfirmCalibration
{
	"\![raiseplugin,Spectre,OnCustomCalibrationConfirm,__NO_EXPRESSIONS__]"
}

OnSpectrePlugin.Possession
{
	if RAND(4) == 0
	{
		"i know you"
		"thief"
		"terrors in the night"
		"caught red handed"
		"%(poke) answer for your crimes\w8\w8\n\nok that's a little mean, i guess"
		"swamp spirit,\w4 swamp spirit,\w4 come out to play\w8\w8\n\ni know i know it's a bog not a swamp,\w4 yadda yadda yadda"
		"last time i tried to %(poke) that one, i got covered in mud"
		"how can you be lonely you've got all %(thatmud) to keep you company"
	}
}

OnGhostCallComplete
{
	OtherGhostOpen
}

OnOtherGhostBooted
{
	OtherGhostOpen
}

OtherGhostOpen
{
	if reference0 == "Noodle"
	{
		"noodle noodle"
	}
}